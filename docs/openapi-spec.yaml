openapi: 3.0.3
info:
  title: examlify API
  description: |
    Intelligent Exam Management System API

    A web-based exam management system that enables automated question extraction from PDF documents using LLM technology, provides an interactive web interface for exam-taking, and includes comprehensive scoring and analytics capabilities.

    ## Features
    - PDF-based exam paper upload and processing
    - LLM-powered question extraction and structuring
    - Interactive web-based exam interface
    - Intelligent hint and solution system
    - Timer-based exam management
    - Automated scoring and analytics
    - Multi-user authentication and administration
    - Comprehensive reporting and exam history
  version: 1.0.0
  contact:
    name: examlify Support
    email: support@examlify.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.examlify.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication APIs
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with username and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Username or email
                  example: "john.doe@example.com"
                password:
                  type: string
                  description: User password
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate session
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/auth/status:
    get:
      tags:
        - Authentication
      summary: Check authentication status
      description: Verify if current session is valid
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Exam Management APIs
  /api/exams:
    get:
      tags:
        - Exams
      summary: List available exams
      description: Get list of all exams available to the current user
      parameters:
        - name: status
          in: query
          description: Filter by exam status
          required: false
          schema:
            type: string
            enum: [active, inactive, draft, processed, processing_failed]
      responses:
        '200':
          description: List of exams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExamSummary'

    post:
      tags:
        - Exams
      summary: Create new exam with optional PDF upload
      description: Create a new exam with optional PDF file upload and processing
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: Exam title
                  example: "Mathematics Midterm Exam"
                description:
                  type: string
                  description: Exam description
                  example: "Covers algebra and calculus topics"
                duration_minutes:
                  type: integer
                  description: Exam duration in minutes
                  example: 120
                pdf_file:
                  type: string
                  format: binary
                  description: PDF file to upload and process (optional)
      responses:
        '200':
          description: Exam created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  exam:
                    $ref: '#/components/schemas/Exam'
                  pdf_processing:
                    type: object
                    description: PDF processing results (if PDF was uploaded)
                    properties:
                      status:
                        type: string
                        enum: [processed, processing_failed]
                      message:
                        type: string
                      total_questions:
                        type: integer
                      error:
                        type: string
                        description: Error message if processing failed



  /api/exams/{exam_id}:
    get:
      tags:
        - Exams
      summary: Get exam details
      description: Retrieve detailed information about a specific exam
      parameters:
        - name: exam_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Exam details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exam'
        '404':
          description: Exam not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Exams
      summary: Update exam
      description: Update exam metadata
      parameters:
        - name: exam_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Exam updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exam'

    delete:
      tags:
        - Exams
      summary: Delete exam
      description: Delete an exam
      parameters:
        - name: exam_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Exam deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/exams/{exam_id}/start:
    post:
      tags:
        - Exam Sessions
      summary: Start exam session
      description: Initialize a new exam attempt session
      parameters:
        - name: exam_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Exam session started
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: integer
                  exam:
                    $ref: '#/components/schemas/Exam'
                  started_at:
                    type: string
                    format: date-time
                  expires_at:
                    type: string
                    format: date-time

  # Exam Session APIs
  /api/sessions/{session_id}/hint/{question_id}:
    post:
      tags:
        - Exam Sessions
      summary: Request hint
      description: Get hint for a specific question
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hint provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  hint:
                    type: string
                  used_hint:
                    type: boolean

  /api/sessions/{session_id}/solution/{question_id}:
    post:
      tags:
        - Exam Sessions
      summary: Request solution
      description: Get detailed solution for a specific question
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
        - name: question_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Solution provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  correct_answer:
                    type: string
                  detailed_solution:
                    type: string
                  used_solution:
                    type: boolean

  /api/exams/{exam_id}/submit:
    post:
      tags:
        - Exam Sessions
      summary: Submit exam
      description: Submit completed exam with all answers and calculate results
      parameters:
        - name: exam_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
                - answers
              properties:
                session_id:
                  type: integer
                answers:
                  type: object
                  description: All answers for the exam (question_id -> answer_option_id mapping)
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Exam submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempt_id:
                    type: integer
                  score:
                    type: number
                  percentage:
                    type: number
                  completed_at:
                    type: string
                    format: date-time

  # Results APIs
  /api/results/{attempt_id}:
    get:
      tags:
        - Results
      summary: Get detailed results
      description: Get comprehensive exam results and analysis
      parameters:
        - name: attempt_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detailed exam results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExamResult'

  /api/results/history:
    get:
      tags:
        - Results
      summary: Get exam history
      description: Get user's exam attempt history
      responses:
        '200':
          description: Exam history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExamAttemptSummary'

  /api/results/summary:
    get:
      tags:
        - Results
      summary: Get performance summary
      description: Get overall performance analytics and trends
      responses:
        '200':
          description: Performance summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceSummary'

  # User Management APIs
  /api/users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get current user's profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/password:
    put:
      tags:
        - Users
      summary: Change password
      description: Change current user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                new_password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/users/{user_id}/history:
    get:
      tags:
        - Users
      summary: Get user exam history
      description: Get exam history for a specific user (admin only)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User exam history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExamAttemptSummary'

  # Admin APIs
  /api/admin/users:
    get:
      tags:
        - Admin
      summary: List all users
      description: Get list of all users in the system (admin only)
      parameters:
        - name: role
          in: query
          description: Filter by user role
          required: false
          schema:
            type: string
            example: "admin"
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Admin
      summary: Create new user
      description: Create a new user account (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                first_name:
                  type: string
                last_name:
                  type: string
                role:
                  type: string
                  description: User role (admin or user)
                  example: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/admin/users/{user_id}:
    put:
      tags:
        - Admin
      summary: Update user
      description: Update user information (admin only)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                role:
                  type: string
                  description: User role (admin or user)
                  example: "user"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete a user account (admin only)
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'



  # System Health APIs
  /api/health:
    get:
      tags:
        - Health
      summary: System health check
      description: Check health status of all system components
      security: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                    description: Overall system health status
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  components:
                    type: object
                    properties:
                      database:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [connected, disconnected]
                          response_time_ms:
                            type: number
                      llm:
                        type: object
                        properties:
                          status:
                            type: string
                            enum: [connected, disconnected]
                          response_time_ms:
                            type: number

  # Configuration APIs
  /api/config/settings:
    get:
      tags:
        - Configuration
      summary: Get system settings
      description: Get current system configuration settings
      responses:
        '200':
          description: System settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSettings'

    put:
      tags:
        - Configuration
      summary: Update system settings
      description: Update system configuration settings (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSettings'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'

    # User
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          description: User role (admin or user)
          example: "admin"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Exam
    Exam:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
          description: Exam duration in minutes
        pdf_filename:
          type: string
        pdf_content:
          type: string
        questions_json:
          type: object
        status:
          type: string
          enum: [draft, processed, processing_failed]
        created_by:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ExamSummary:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        duration_minutes:
          type: integer
          description: Exam duration in minutes
        status:
          type: string
          enum: [draft, processed, processing_failed]
        created_at:
          type: string
          format: date-time

    # Question
    Question:
      type: object
      properties:
        id:
          type: string
        question_text:
          type: string
        question_type:
          type: string
          enum: [multiple_choice]
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuestionOption'
        correct_answer:
          type: string
        hint:
          type: string
        detailed_solution:
          type: string
        subject:
          type: string
        topic:
          type: string
        marks:
          type: number
          default: 4
        negative_marks:
          type: number
          default: -1

    QuestionOption:
      type: object
      properties:
        id:
          type: string
        option_text:
          type: string

    # Exam Session
    ExamSession:
      type: object
      properties:
        id:
          type: integer
        exam_id:
          type: integer
        user_id:
          type: integer
        started_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, completed, expired]
        current_question:
          type: integer
        answered_questions:
          type: integer
        total_questions:
          type: integer

    # Exam Results
    ExamResult:
      type: object
      properties:
        attempt_id:
          type: integer
        exam_id:
          type: integer
        user_id:
          type: integer
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        total_score:
          type: number
        total_marks:
          type: number
        percentage:
          type: number
        question_results:
          type: array
          items:
            $ref: '#/components/schemas/QuestionResult'
        subject_breakdown:
          type: object
          additionalProperties:
            type: object
            properties:
              score:
                type: number
              total_marks:
                type: number
              percentage:
                type: number

    QuestionResult:
      type: object
      properties:
        question_id:
          type: string
        user_answer:
          type: string
        correct_answer:
          type: string
        is_correct:
          type: boolean
        marks_obtained:
          type: number
        used_hint:
          type: boolean
        used_solution:
          type: boolean

    ExamAttemptSummary:
      type: object
      properties:
        attempt_id:
          type: integer
        exam_title:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        total_score:
          type: number
        total_marks:
          type: number
        percentage:
          type: number

    # Performance Summary
    PerformanceSummary:
      type: object
      properties:
        total_exams:
          type: integer
        average_score:
          type: number
        average_percentage:
          type: number
        best_score:
          type: number
        worst_score:
          type: number
        subject_performance:
          type: object
          additionalProperties:
            type: object
            properties:
              exams_attempted:
                type: integer
              average_score:
                type: number
              average_percentage:
                type: number
        recent_trends:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              average_percentage:
                type: number

    # System Settings
    SystemSettings:
      type: object
      properties:
        max_file_size_mb:
          type: integer
          description: Maximum PDF file size in MB
        allowed_file_types:
          type: array
          items:
            type: string
          description: Allowed file types for upload
        session_timeout_minutes:
          type: integer
          description: Session timeout in minutes
        max_questions_per_exam:
          type: integer
          description: Maximum questions per exam
        llm_provider:
          type: string
          enum: [openai, anthropic]
          description: LLM provider to use
        default_exam_duration:
          type: integer
          description: Default exam duration in minutes

    # Common
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Exams
    description: Exam management and operations
  - name: Exam Sessions
    description: Exam taking and session management
  - name: Results
    description: Exam results and analytics
  - name: Users
    description: User profile and account management
  - name: Admin
    description: Administrative operations

  - name: Health
    description: System health and monitoring
  - name: Configuration
    description: System configuration management